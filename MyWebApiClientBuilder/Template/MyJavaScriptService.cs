// ------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本: 12.0.0.0
//  
//     对此文件的更改可能会导致不正确的行为。此外，如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace MyWebApiClientBuilder.Template
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using MyWebApiClientBuilder.Model;
    using MyWebApiClientBuilder.Util;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "E:\My-GitHub\my-csharp-project\MyWebApiClientBuilder\Template\MyJavaScriptService.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class MyJavaScriptService : MyJavaScriptServiceBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 8 "E:\My-GitHub\my-csharp-project\MyWebApiClientBuilder\Template\MyJavaScriptService.tt"

Dictionary<string, SwaggerPath> paths = DocInfo.Paths;

            
            #line default
            #line hidden
            this.Write("\"use strict\";\r\n\r\n\r\nvar MyJavaScriptService = {\r\n\r\n\t// 登录后的 Token.\r\n\taccessToken :" +
                    " \"\",\r\n\r\n\r\n");
            
            #line 20 "E:\My-GitHub\my-csharp-project\MyWebApiClientBuilder\Template\MyJavaScriptService.tt"

foreach(var key in paths.Keys) 
{
	SwaggerPath pathData = paths[key];

	string[] apiPaths = key.Split('/');
	string lastPath = apiPaths[apiPaths.Length - 1];

	// url 地址.
	string url = key;

	// 是否是动态的 url.
	bool isDynamic = false;

	// 检查地址的最后一个
	if(lastPath.StartsWith("{") && lastPath.EndsWith("}")) {
		// 最后一个是动态地址.
		isDynamic = true;
		
		// 变更 url.
		url = url.Replace(lastPath, "");

		// 变更 js 方法的路径.
		lastPath = apiPaths[apiPaths.Length - 2];
	}

            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 47 "E:\My-GitHub\my-csharp-project\MyWebApiClientBuilder\Template\MyJavaScriptService.tt"

	// ---------- GET 处理.
	if(pathData.Get != null) 
	{
		// 路径的参数.
		List<string> pathParameterNameList = pathData.Get.GetParameterNameList("path");
		// 查询的参数.
		List<string> queryParameterNameList = pathData.Get.GetParameterNameList("query");
		// hearder 的参数.
		List<string> headerParameterNameList = pathData.Get.GetParameterNameList("header");

		// js 的方法名.
		string jsFuncName = lastPath;
		if(isDynamic) {
			// 动态路径的情况下. 变更方法名.
			jsFuncName = "get" + jsFuncName;
		} 

		jsFuncName = Renamer.RenameJavaScriptFunctionName(jsFuncName);


		// js 方法的参数.
		string jsFuncParam = "";
		if(isDynamic) {
			// 动态路径的情况下. 参数 = 路径的参数
			jsFuncParam = string.Join(",", pathParameterNameList);
		} else {
			// 非动态路径的情况下. 参数 = 查询的参数
			jsFuncParam = string.Join(",", queryParameterNameList);
		}


            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 80 "E:\My-GitHub\my-csharp-project\MyWebApiClientBuilder\Template\MyJavaScriptService.tt"
 if(!String.IsNullOrEmpty(pathData.Get.Summary)) { 
            
            #line default
            #line hidden
            this.Write(" \r\n\t// ");
            
            #line 81 "E:\My-GitHub\my-csharp-project\MyWebApiClientBuilder\Template\MyJavaScriptService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pathData.Get.Summary));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 82 "E:\My-GitHub\my-csharp-project\MyWebApiClientBuilder\Template\MyJavaScriptService.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t");
            
            #line 83 "E:\My-GitHub\my-csharp-project\MyWebApiClientBuilder\Template\MyJavaScriptService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(jsFuncName));
            
            #line default
            #line hidden
            this.Write(": function(");
            
            #line 83 "E:\My-GitHub\my-csharp-project\MyWebApiClientBuilder\Template\MyJavaScriptService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(jsFuncParam));
            
            #line default
            #line hidden
            this.Write(") {\r\n\t\treturn axios({\r\n\t\t\tmethod : \'get\',\r\n");
            
            #line 86 "E:\My-GitHub\my-csharp-project\MyWebApiClientBuilder\Template\MyJavaScriptService.tt"
 if(isDynamic) { 
            
            #line default
            #line hidden
            this.Write("\t\t\turl: \'");
            
            #line 87 "E:\My-GitHub\my-csharp-project\MyWebApiClientBuilder\Template\MyJavaScriptService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(url));
            
            #line default
            #line hidden
            this.Write("\' + ");
            
            #line 87 "E:\My-GitHub\my-csharp-project\MyWebApiClientBuilder\Template\MyJavaScriptService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(jsFuncParam));
            
            #line default
            #line hidden
            this.Write(", \r\n");
            
            #line 88 "E:\My-GitHub\my-csharp-project\MyWebApiClientBuilder\Template\MyJavaScriptService.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("\t\t\turl: \'");
            
            #line 89 "E:\My-GitHub\my-csharp-project\MyWebApiClientBuilder\Template\MyJavaScriptService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(url));
            
            #line default
            #line hidden
            this.Write("\', \r\n");
            
            #line 90 "E:\My-GitHub\my-csharp-project\MyWebApiClientBuilder\Template\MyJavaScriptService.tt"
 } 
            
            #line default
            #line hidden
            
            #line 91 "E:\My-GitHub\my-csharp-project\MyWebApiClientBuilder\Template\MyJavaScriptService.tt"
 if(headerParameterNameList.Count() > 0) { 
            
            #line default
            #line hidden
            this.Write("\t\t\theaders:{\r\n\t\t\t\t\'Authorization\': \'Bearer \' + this.accessToken\r\n\t\t\t},\r\n");
            
            #line 95 "E:\My-GitHub\my-csharp-project\MyWebApiClientBuilder\Template\MyJavaScriptService.tt"
 } 
            
            #line default
            #line hidden
            this.Write("            params: {\r\n");
            
            #line 97 "E:\My-GitHub\my-csharp-project\MyWebApiClientBuilder\Template\MyJavaScriptService.tt"
 foreach(string param in queryParameterNameList) { 
            
            #line default
            #line hidden
            this.Write("                ");
            
            #line 98 "E:\My-GitHub\my-csharp-project\MyWebApiClientBuilder\Template\MyJavaScriptService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(param));
            
            #line default
            #line hidden
            this.Write(": ");
            
            #line 98 "E:\My-GitHub\my-csharp-project\MyWebApiClientBuilder\Template\MyJavaScriptService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(param));
            
            #line default
            #line hidden
            this.Write(",\r\n");
            
            #line 99 "E:\My-GitHub\my-csharp-project\MyWebApiClientBuilder\Template\MyJavaScriptService.tt"
 } 
            
            #line default
            #line hidden
            this.Write("            },\r\n\t\t\tresponseType: \'json\',\r\n        });\r\n\t},\r\n\r\n");
            
            #line 105 "E:\My-GitHub\my-csharp-project\MyWebApiClientBuilder\Template\MyJavaScriptService.tt"
	
	}

	// ---------- POST 处理.
	if(pathData.Post != null) 
	{
		// Post 的参数.
		List<SwaggerActionParameter> bodyParameterList = pathData.Post.GetParameterList("body");
		// 取得唯一的参数.
		SwaggerActionParameter bodyParameter = bodyParameterList.FirstOrDefault();

		// 取得引用的属性.
		string refName = null;
		
		if(bodyParameter != null) 
		{
			refName = bodyParameter.SchemaRefName;
		}
		
		// 模型的属性定义.
		SwaggerDefinition modelDefinition = null;

		if(!string.IsNullOrEmpty(refName))
		{
			modelDefinition = DocInfo.GetSwaggerDefinition(refName);
		}



		// hearder 的参数.
		List<string> headerParameterNameList = pathData.Post.GetParameterNameList("header");

		// js 的方法名.
		string jsFuncName = lastPath;
		jsFuncName = Renamer.RenameJavaScriptFunctionName(jsFuncName);

		List<string> propertyNameList = new List<string>();

		if(modelDefinition != null) {
			propertyNameList = modelDefinition.PropertyNameList;
		}

		// js 方法的参数.
		string jsFuncParam =  string.Join(",", propertyNameList);


            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 152 "E:\My-GitHub\my-csharp-project\MyWebApiClientBuilder\Template\MyJavaScriptService.tt"
 if(!String.IsNullOrEmpty(pathData.Post.Summary)) { 
            
            #line default
            #line hidden
            this.Write(" \r\n\t// ");
            
            #line 153 "E:\My-GitHub\my-csharp-project\MyWebApiClientBuilder\Template\MyJavaScriptService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pathData.Post.Summary));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 154 "E:\My-GitHub\my-csharp-project\MyWebApiClientBuilder\Template\MyJavaScriptService.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t");
            
            #line 155 "E:\My-GitHub\my-csharp-project\MyWebApiClientBuilder\Template\MyJavaScriptService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(jsFuncName));
            
            #line default
            #line hidden
            this.Write(": function(");
            
            #line 155 "E:\My-GitHub\my-csharp-project\MyWebApiClientBuilder\Template\MyJavaScriptService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(jsFuncParam));
            
            #line default
            #line hidden
            this.Write(") {\r\n\t\treturn axios({\r\n\t\t\tmethod : \'post\',\r\n");
            
            #line 158 "E:\My-GitHub\my-csharp-project\MyWebApiClientBuilder\Template\MyJavaScriptService.tt"
 if(isDynamic) { 
            
            #line default
            #line hidden
            this.Write("\t\t\turl: \'");
            
            #line 159 "E:\My-GitHub\my-csharp-project\MyWebApiClientBuilder\Template\MyJavaScriptService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(url));
            
            #line default
            #line hidden
            this.Write("\' + ");
            
            #line 159 "E:\My-GitHub\my-csharp-project\MyWebApiClientBuilder\Template\MyJavaScriptService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(jsFuncParam));
            
            #line default
            #line hidden
            this.Write(", \r\n");
            
            #line 160 "E:\My-GitHub\my-csharp-project\MyWebApiClientBuilder\Template\MyJavaScriptService.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("\t\t\turl: \'");
            
            #line 161 "E:\My-GitHub\my-csharp-project\MyWebApiClientBuilder\Template\MyJavaScriptService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(url));
            
            #line default
            #line hidden
            this.Write("\', \r\n");
            
            #line 162 "E:\My-GitHub\my-csharp-project\MyWebApiClientBuilder\Template\MyJavaScriptService.tt"
 } 
            
            #line default
            #line hidden
            
            #line 163 "E:\My-GitHub\my-csharp-project\MyWebApiClientBuilder\Template\MyJavaScriptService.tt"
 if(headerParameterNameList.Count() > 0) { 
            
            #line default
            #line hidden
            this.Write("\t\t\theaders:{\r\n\t\t\t\t\'Authorization\': \'Bearer \' + this.accessToken\r\n\t\t\t},\r\n");
            
            #line 167 "E:\My-GitHub\my-csharp-project\MyWebApiClientBuilder\Template\MyJavaScriptService.tt"
 } 
            
            #line default
            #line hidden
            
            #line 168 "E:\My-GitHub\my-csharp-project\MyWebApiClientBuilder\Template\MyJavaScriptService.tt"
 if(propertyNameList != null && propertyNameList.Count() > 0) { 
            
            #line default
            #line hidden
            this.Write("            data: {\r\n");
            
            #line 170 "E:\My-GitHub\my-csharp-project\MyWebApiClientBuilder\Template\MyJavaScriptService.tt"
 foreach(string param in propertyNameList) { 
            
            #line default
            #line hidden
            this.Write("                ");
            
            #line 171 "E:\My-GitHub\my-csharp-project\MyWebApiClientBuilder\Template\MyJavaScriptService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(param));
            
            #line default
            #line hidden
            this.Write(": ");
            
            #line 171 "E:\My-GitHub\my-csharp-project\MyWebApiClientBuilder\Template\MyJavaScriptService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(param));
            
            #line default
            #line hidden
            this.Write(",\r\n");
            
            #line 172 "E:\My-GitHub\my-csharp-project\MyWebApiClientBuilder\Template\MyJavaScriptService.tt"
 } 
            
            #line default
            #line hidden
            this.Write("            },\r\n");
            
            #line 174 "E:\My-GitHub\my-csharp-project\MyWebApiClientBuilder\Template\MyJavaScriptService.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\tresponseType: \'json\',\r\n        });\r\n\t},\r\n\r\n");
            
            #line 179 "E:\My-GitHub\my-csharp-project\MyWebApiClientBuilder\Template\MyJavaScriptService.tt"

	}

            
            #line default
            #line hidden
            this.Write("\r\n\r\n");
            
            #line 184 "E:\My-GitHub\my-csharp-project\MyWebApiClientBuilder\Template\MyJavaScriptService.tt"

}

            
            #line default
            #line hidden
            this.Write("\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class MyJavaScriptServiceBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
