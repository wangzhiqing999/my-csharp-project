@model MySystemConfig.Model.SystemConfigValue

@{
    ViewBag.Title = "Edit";

    MySystemConfig.Model.SystemConfigType sct = ViewBag.SystemConfigType;
    List<MySystemConfig.Model.SystemConfigProperty> scp = ViewBag.SystemConfigPropertys;
    
}

<h2>Edit</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>SystemConfigValue</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.ConfigTypeCode, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <label class="control-label">
                    @Html.DisplayFor(model => model.ConfigTypeCode)
                </label>
                @Html.HiddenFor(model => model.ConfigTypeCode)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ConfigCode, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <label class="control-label">
                    @Html.DisplayFor(model => model.ConfigCode)
                </label>
                @Html.HiddenFor(model => model.ConfigCode)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ConfigName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ConfigName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ConfigName, "", new { @class = "text-danger" })
            </div>
        </div>


        @if (sct.ConfigClassName == MySystemConfig.Model.SystemConfigType.SimpleDictionary)
        {
            System.Collections.Generic.Dictionary<string, object> detailData = Model.ConfigValueObject as System.Collections.Generic.Dictionary<string, object>;

            foreach (var prop in scp)
            {
                if (prop.PropertyDataType == "System.Boolean")
                {
                    bool value = (bool)detailData[prop.PropertyName];                    
                    <div class="form-group">
                        <label class="control-label col-md-2" for="@(prop.PropertyName)">@(prop.PropertyDesc)</label>
                        <div class="col-md-10">
                            <input data-val="true" id="@(prop.PropertyName)" name="@(prop.PropertyName)" type="checkbox"   @(value ? "checked='checked'" : "") />
                        </div>
                    </div>
                }
                else
                {
                    <div class="form-group">
                        <label class="control-label col-md-2" for="@(prop.PropertyName)">@(prop.PropertyDesc)</label>
                        <div class="col-md-10">
                            <input class="form-control text-box single-line" data-val="true" id="@(prop.PropertyName)" name="@(prop.PropertyName)" type="text" value="@(detailData[prop.PropertyName])" />
                            <span class="field-validation-valid text-danger" data-valmsg-for="@(prop.PropertyName)" data-valmsg-replace="true"></span>
                        </div>
                    </div>
                }
            }
        }
        else if (sct.ConfigClassName == "System.String")
        {
            <div class="form-group">
                @Html.LabelFor(model => model.ConfigValue, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextBox(name: "ConfigValue", value: Model.ConfigValueObject, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ConfigValue, "", new { @class = "text-danger" })
                </div>
            </div>
        }
        else
        {
            <div class="form-group">
                @Html.LabelFor(model => model.ConfigValue, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ConfigValue, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ConfigValue, "", new { @class = "text-danger" })
                </div>
            </div>
        }

        




        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
